##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program; If not, see <http://www.gnu.org/licenses/>.
##
## Copyright (C) 2017 Lesaffre Remi (remi.lesaffre@gmail.com)
##

# Cmake initialisation
PROJECT(Engine_v0)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/)


# Project version
SET(ENGINE_VERSION_MAJOR 0)
SET(ENGINE_VERSION_MINOR 5)
SET(ENGINE_VERSION_PATCH 0)
SET(ENGINE_VERSION_EXTRA 0)
SET(ENGINE_VERSION ${ENGINE_VERSION_MAJOR}.${ENGINE_VERSION_MINOR}.${ENGINE_VERSION_PATCH})
SET(ENGINE_VERSION_FULL ${ENGINE_VERSION}.${ENGINE_VERSION_EXTRA})

# Project Resources path
SET(RESOURCES_PATH ${CMAKE_SOURCE_DIR}/resources)

# Project configuration
SET(ENGINE_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include/)
SET(ENGINE_SOURCE_DIR ${CMAKE_SOURCE_DIR}/source/)
SET(ENGINE_SHADER_DIR ${CMAKE_SOURCE_DIR}/resources/)

# Configuration files
CONFIGURE_FILE(
   ${ENGINE_INCLUDE_DIR}/version.h.in
   ${ENGINE_INCLUDE_DIR}/version.h
)
CONFIGURE_FILE(
   ${ENGINE_INCLUDE_DIR}/config.h.in
   ${ENGINE_INCLUDE_DIR}/config.h
)
   
   
# Libraries dependencies
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLFW REQUIRED glfw3)
FIND_PACKAGE(glm REQUIRED)
FIND_PACKAGE(imgui REQUIRED)


# Source files
FILE(GLOB_RECURSE ENGINE_SOURCE_FILES ${ENGINE_SOURCE_DIR}/*.cpp)
FOREACH(SOURCE_FILE IN ITEMS ${ENGINE_SOURCE_FILES})
    GET_FILENAME_COMPONENT(SOURCE_FILE_PATH "${SOURCE_FILE}" PATH)
    FILE(RELATIVE_PATH SOURCE_FILE_RELATIVE_PATH "${CMAKE_SOURCE_DIR}" "${SOURCE_FILE_PATH}")
    STRING(REPLACE "/" "\\" GROUP_PATH "${SOURCE_FILE_RELATIVE_PATH}")
    SOURCE_GROUP("${GROUP_PATH}" FILES "${SOURCE_FILE}")
ENDFOREACH()

# Include files
FILE(GLOB_RECURSE ENGINE_INCLUDE_FILES ${ENGINE_INCLUDE_DIR}/*.hpp ${ENGINE_INCLUDE_DIR}/*.h)	
FOREACH(HEADER_FILE IN ITEMS ${ENGINE_INCLUDE_FILES})
    GET_FILENAME_COMPONENT(HEADER_FILE_PATH "${HEADER_FILE}" PATH)
    FILE(RELATIVE_PATH HEADER_FILE_RELATIVE_PATH "${CMAKE_SOURCE_DIR}" "${HEADER_FILE_PATH}")
    STRING(REPLACE "/" "\\" GROUP_PATH "${HEADER_FILE_RELATIVE_PATH}")
    SOURCE_GROUP("${GROUP_PATH}" FILES "${HEADER_FILE}")
ENDFOREACH()

# Shader files
FILE(GLOB_RECURSE ENGINE_SHADER_FILES ${ENGINE_SHADER_DIR}/*.glsl)	
FOREACH(SHADER_FILE IN ITEMS ${ENGINE_SHADER_FILES})
    GET_FILENAME_COMPONENT(SHADER_FILE_PATH "${SHADER_FILE}" PATH)
    FILE(RELATIVE_PATH SHADER_FILE_RELATIVE_PATH "${CMAKE_SOURCE_DIR}" "${SHADER_FILE_PATH}")
    STRING(REPLACE "/" "\\" GROUP_PATH "${SHADER_FILE_RELATIVE_PATH}")
    SOURCE_GROUP("${GROUP_PATH}" FILES "${SHADER_FILE}")
ENDFOREACH()


	
# Include directories
INCLUDE_DIRECTORIES(${ENGINE_INCLUDE_DIR})
INCLUDE_DIRECTORIES(SYSTEM ${GLFW_INCLUDE_DIR} ${IMGUI_INCLUDE_DIR} ${GLM_INCLUDE_DIRS})


# Binary settings
ADD_EXECUTABLE(${CMAKE_PROJECT_NAME} ${ENGINE_SOURCE_FILES} ${ENGINE_INCLUDE_FILES} ${ENGINE_SHADER_FILES})
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${GLFW_LIBRARIES})
